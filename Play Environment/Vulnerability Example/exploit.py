import jsonpickle
import os
from student import Student

students = []

# Let's assume someone hands me a json file with Student data in it.
# So, I open the json file and read it
with open("exploit.json", 'r') as f:
    jsonData = f.read()

# I decode the json here
newStudents = jsonpickle.decode(jsonData)

# Now, the json data may have other data too, so let me just get the data
# that is of type Student and add it to my students list
for student in newStudents:
    if type(student) is Student:
        students.append(student)

# Now, I know for a fact that the json data did have student data in it, so
# let's assume I am unaware of anything going wrong.
assert len(students) != 0

# What is this? A new file has been created. Also, note that the working directory
# is not the same as the one the exploit.py file is in. The json data changed the
# working directory one folder down.
assert os.path.isfile("exploit.txt")

# In essence, I can do anything with the system with the json data and exploit
# my victim's computer as evident from the example above. It would only be smart
# to only unpickle data that you know is absolutely secure. Currently, the only way to
# exploit json pickle is through the __reduce__ method. However, once the __reduce__
# method is given along with some malicious code, it is game over for the victim.
# You can find the malicious json in exploit.json

